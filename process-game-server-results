#!/usr/bin/env node

const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false
});

function getTimeRange(idx) {
    switch (idx) {
        // if (delta > 40) {
        case 7:
            return [40, 75]; // whats upper end here?
        // } else if (delta > 30) {
        case 6:
            return [31, 40];
        // } else if (delta > 25) {
        case 5:
            return [26, 30];
        // } else if (delta > 23) {
        case 4:
            return [24, 25];
        // } else if (delta > 21) {
        case 3:
            return [22, 23];
        // } else if (delta > 19) {
        case 2:
            return [20, 21];
        // } else if (delta > 17) {
        case 1:
            return [18, 19];
        // else this.frameBuckets[0]++;
        case 0:
            return [16, 17];
        default:
            throw new Error("NEVER EVER HAVE I EVER");
    }
}

const allTickCounts = new Array(8).fill(0);
let totalLowGameTime = 0;
let totalHighGameTime = 0;
let estimatedGamesPlayed = 0;
let totalConcurrentGames = 0;

rl.on('line', function(line){
    if (!line.includes("winner")) {
        return;
    }

    const activeGames = +line.split("(")[1].split(")")[0];
    const tickCounts = line.split("___")[1].split(",").map(x => +x);

    // The game experience a weird lag spike that caused it to think that no
    // one shooting??  Or it could be a memory pool mess up
    if (tickCounts[0] < 800) {
        tickCounts.forEach((x, i) => allTickCounts[i] += x);
    }

    const estimatedTimeLow = tickCounts.
        map((x, i) => x * getTimeRange(i)[0]).
        reduce((acc, time) => acc + time, 0);

    const estimatedTimeHigh = tickCounts.
        map((x, i) => x * getTimeRange(i)[1]).
        reduce((acc, time) => acc + time, 0);

    totalLowGameTime += estimatedTimeLow;
    totalHighGameTime += estimatedTimeHigh;
    estimatedGamesPlayed += 1;

    totalConcurrentGames += activeGames;

    console.log(`GAME_TIME_LOW, ${totalLowGameTime}`);
    console.log(`GAME_TIME_HIGH, ${totalHighGameTime}`);
    console.log(`tickCounts, ${JSON.stringify(allTickCounts, null, 1)}`);
    console.log(`totalGames, ${estimatedGamesPlayed}`);
    console.log(`totalConcurrentGames, ${totalConcurrentGames} :: ${totalConcurrentGames / estimatedGamesPlayed}`);
});

